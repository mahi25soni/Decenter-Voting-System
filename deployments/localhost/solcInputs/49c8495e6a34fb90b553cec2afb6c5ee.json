{
  "language": "Solidity",
  "sources": {
    "contracts/Voting.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\ncontract Storage {\r\n\r\n    uint256 totalVotes;\r\n    mapping(string => uint256) partyToVote;\r\n    address[] allowedVoters = [\r\n        0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266,\r\n        0x70997970C51812dc3A010C7d01b50e0d17dc79C8,\r\n        0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC,\r\n        0x90F79bf6EB2c4f870365E785982E1f101E93b906,\r\n        0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65];\r\n\r\n    modifier isVoter{\r\n        for(uint i=0; i < allowedVoters.length ; i++){\r\n            if(msg.sender == allowedVoters[i]){\r\n                delete allowedVoters[i];\r\n                _;\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Invalid Voter\");\r\n    }\r\n    \r\n    function vote(string memory partyname) public payable isVoter{\r\n        partyToVote[partyname] += 1;\r\n        totalVotes++;\r\n    }\r\n    // This 'vote' can create decentralized, if we only access everything from front-end. We can create function for each party like 'bjpVote',\r\n    // 'congressVote', 'aapVote'. Creating multiple function is feasible or not I don't know.\r\n\r\n    function netVotes() public view returns(uint256){\r\n        return totalVotes;\r\n    }\r\n\r\n    function votePerParty(string memory partyname) public view returns(uint256){\r\n        return partyToVote[partyname];\r\n    }\r\n\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}